
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPubSubService PubSubService
@inject NavigationManager NavigationManager
@namespace App.Shared.Auth

@if(IsAuthenticated)
{
    @Yes
}
else
{
    @No
    if(No is null && IsPageRestriction)    
    {
        <h2>You do not have access to view this page.</h2>
        <a href="/system-admin-login">Please login here.</a>
    }
}





@code {

    protected override async Task OnInitializedAsync()
    {
        PubSubService.Subscribe<UpdateRestrictedViewsEvent>(Notfiy);
        await CheckState();
    }

    protected override async Task OnParametersSetAsync()
    {
        await CheckState();
        await base.OnParametersSetAsync();
    }

    public async Task Notfiy()
    {
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task CheckState()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if(state is null)
        {
            IsAuthenticated = false;            
        }
        if(state.User.IsInRole("SystemAdmin"))
        {
            IsAuthenticated = true;
        }
        else {
            IsAuthenticated = false;
            
        }        
    }

    private void CheckSendToHome()
    {
        if(No is null)
        {
            NavigationManager.NavigateTo("index");
        }
    }


    


    public bool IsAuthenticated { get; set; }

    [Parameter]
    public bool IsPageRestriction { get; set; } = false;

    [Parameter]
    public RenderFragment Yes { get; set;}

    [Parameter]
    public RenderFragment No { get; set;}
}