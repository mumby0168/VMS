@page "/"
@using Governor.Shared
@inject ServicesManager Manager;

@if (_services == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>URL</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var service in _services)
            {
                <tr>
                    <td><strong>@service.Name</strong></td>
                    <td>
                        <a href="@service.Url" target="_blank">@service.Url</a>
                    </td>
                    <td>
                        @if (@service.IsRunning)
                        {
                            <span class="badge badge-success">RUNNING</span>
                        }
                        else
                        {
                            <span class="badge badge-warning">STOPPED</span>
                        }
                    </td>
                    <td>
                        @if (@service.IsRunning)
                        {
                            <button type="button" class="btn btn-danger" @onclick="@(() => KillAsync(@service))">Kill</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-primary" @onclick="@(() => StartAsync(@service))">Start</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@functions {
    
    IEnumerable<ServiceInfo> _services;

    protected override async Task OnInitializedAsync()
    {        
        _services = Manager.GetServices();
        await UpdateServicesAsync();
        await base.OnInitializedAsync();
    }        

    private async Task UpdateServicesAsync()
    {        
        _services = Manager.GetServices();
        StateHasChanged();
       
    }

    public async Task StartAsync(ServiceInfo service)
    {
        Manager.Start(service.Name);
        service.IsRunning = true;
    }

    public async Task KillAsync(ServiceInfo service)
    {
        Manager.Kill(service.Name);
        service.IsRunning = false;
    }
}